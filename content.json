{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Gawain","url":"https://Gawain-sq.github.io.git","root":"/"},"pages":[],"posts":[{"title":"test","slug":"test","date":"2020-08-29T07:04:38.000Z","updated":"2020-08-29T10:50:01.395Z","comments":true,"path":"2020/08/29/test/","link":"","permalink":"https://gawain-sq.github.io.git/2020/08/29/test/","excerpt":"","text":"RHCE8123456789101112131415161718192021222324252627282930313233343536373839404142434445464748491.安装及配置ansible:在 workstation 上安装并配置 ansible, 要求如下： 安装相应的软件包 创建一个静态 inventory 到/home/student/ansible/inventory, 清单包含： servera 属于 dev 组 serverb 属于 test 组 serverc 和 serverd 属于 prod 组 bastion 属于 balancers 主机组 prod 组属于 webservers 主机组创建一个/home/student/ansible/ansible.cfg 使用/home/student/ansible/inventory 角色目录为/home/student/ansible/roles######################################################################################## ssh student@workstation (用户名和密码都是student) [student@workstation ~]$ sudo yum -y install ansible[student@workstation ~]$ pwd/home/student[student@workstation ~]$ mkdir -p ansible/roles[student@workstation ~]$ cd ansible[student@workstation ansible]$ vim inventory[dev]servera[test]serverb[prod]servercserverd[balancers]bastion[webservers:children]prod[student@workstation ansible]$ cp -rf /etc/ansible/ansible.cfg .[student@workstation ansible]$ vim ansible.cfg # 打开下面的注释，修改路径[defaults]inventory = /home/student/inventoryroles_path = /home/student/ansible/roleremote_user = student[privilege_escalation]become=Truebecome_method=sudo # 提权方式become_user=root # 提权为root用户become_ask_pass=False # 是否需要密码[student@workstation ansible]$ ansible dev --list-hosts # 验证是否可以查看到指定的主机，验证配置文件是否有误 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849502.创建并运行ansible ad-hoc命令:创建 ad-hoc 脚本 /home/student/ansible/adhoc.sh，为所有节点配置 yum 仓库：仓库 1： 仓库名： base 描述为： epo_base Base URL：http://content.example.com/rhel8.0/x86_64/dvd/BaseOS 开启 GPG 签名验证，密钥为： http://content.example.com/rhel8.0/x86_64/dvd/RPM-GPGKEY-redhat-release 仓库的状态是 enabled仓库 2： 仓库名： stream 描述为： repo_stream Base URL： http://content.example.com/rhel8.0/x86_64/dvd/AppStream 开启 GPG 签名验证，密钥为： http://content.example.com/rhel8.0/x86_64/dvd/RPM-GPGKEY-redhat-release 仓库的状态是 enabled######################################################################################## ssh student@workstation (用户名和密码都是student) [student@workstation ansible]$ ansible all -m ping -o # 检查主机是否都可以ping通# 打开多个终端，方便后面测试和验证（ctrl+shift+t，可以快速打开一个终端）[student@workstation ~]$ ssh student@servera[student@workstation ~]$ ssh student@serverb[student@workstation ~]$ ssh student@serverc[student@workstation ~]$ ssh student@serverd[student@workstation ~]$ ssh student@bastion# 查看ansible模块帮助[student@workstation ansible]$ ansible-doc yum_repository (shift+T 切换到最后)# 开始实验[student@workstation ansible]$ pwd/home/student/ansible[student@workstation ansible]$ vim ad-hoc#!/bin/bashansible all -m yum_repositor -a \"\\name=repo_base \\description=repo_base \\baseurl=http://contenr.example.com/rhel8.0/x86_64/dvd/BaseOS \\gpgcheck=yes \\gpgkey=http://content.example.com/rhel8.0/x86_64/dvd/RPM-GPG-KEY-redhat-relese \\file=repo_base\"ansible all -m yum_repositor -a \"\\name=repo_stream \\description=repo_stream \\baseurl=http://contenr.example.com/rhel8.0/x86_64/dvd/AppStream \\gpgcheck=yes \\gpgkey=http://content.example.com/rhel8.0/x86_64/dvd/RPM-GPG-KEY-redhat-relese \\file=repo_stream\"[student@workstation ansible]$ chmod +x ad-hoc[student@workstation ansible]$ ./ad-hoc# 验证[student@servera ~]$ yum repolist # 可以读取repo内的文件即可 123456789101112131415161718192021222324252627282930313.安装软件包:创建/home/devops/ansible/install_packages.yml 的 playbook： 在 dev、test、prod 组中安装 php 和 mariadb 软件包 在 dev 组中安装 Development Tools 包组 在 dev 组中的主机升级所有的软件包#######################################################################################[student@workstation ansible]$ vim install_packages.yml---- name: install php and mariadb host: - dev - test - prod tasks: - name: install packages yum: name: - php - mariadb state: present- name: install development tools group host: dev tasks: - name: install dev tools yum: name: \"@Development Tools\" state: present - name: update all yum: name: '*' state: latest 123456789101112131415161718192021222324254.使用RHEL system role:安装 RHEL system roles 软件包，并创建一个 playbook 名字为 configure_timesync.yml 在所有受管主机中运行 使用 timesync 角色 配置角色使用的时间服务器是 172.25.254.254 配置时间同步的方式是 iburst#######################################################################################[student@workstation ansible]$ sudo yum -y install rhel-system-roles (密码student)[student@workstation ansible]$ vim ansible.cfg[defaults]roles_path = /home/student/ansible/role:/usr/share/ansible/roles/[student@workstation ansible]$ ansible-galaxy list # 查看是否有系统的roles[student@workstation ansible]$ cp -rf /usr/share/doc/rhel-system-roles/timesync/example-timesync-playbook.yml ./configure_timesync.yml[student@workstation ansible]$ vim configure_timesync.yml---- hosts: all vars: timesync_ntp_servers: - hostname: 172.25.254.254 iburst: yes roles: - rhel-system-roles.timesync# 验证:[student@workstation ansible]$ ansible all -m shell -a 'grep ^server /etc/chrony.conf'[student@workstation ansible]$ ansible all -m shell -a 'timedatectl | grep -B1 NTP' 12345678910111213145.使用ansible galaxy安装roles:使用名为 requirements.yml 的文件下载并安装 Ansible Galaxy 角色到 /home/student/ansible/roles 目录中，可以从下列 URL 下载： http://materials.example.com/haproxy.tar 这个角色的名字叫 balance http://materials.example.com/phpinfo.tar 这个角色的名字叫 phpinfo#######################################################################################[student@workstation ansible]$ cd roles/[student@workstation roles]$ vim requirements.yml---- src: http://materials.example.com/phpinfo.tar name: phpinfo- src: http://materials.example.com/haproxy.tar name: balance[student@workstation roles]$ ansible-galaxy install -r /home/student/ansible/roles/requirements.yml -p /home/student/ansible/roles[student@workstation roles]$ ansible-galaxy list # 查看是否安装了这两个role到student用户下面 123456789101112131415161718192021222324252627282930313233346.创建并使用role:在/home/devops/ansible/roles 目录中创建名为 apache 的角色，要求： 安装 httpd 软件包，开机启动，并自动运行 启用防火墙，开放 web 服务 模板文件 index.html.j2，复制到/var/www/html/index.html,内容如下： welcome to HOSTNAME on IPADDRESS创建名为 newroles.yml 的 playbook，使用这个角色，对 webservers 组进行操作。HOSTNAME 是 FQDN 的完整主机名称。#######################################################################################[student@workstation ansible]$ cd roles/[student@workstation roles]$ ansible-galaxy init apache[student@workstation ansible]$ vim roles/apache/tasks/main.yml---- name: install httpd yum: name: httpd state: latest- name: start httpd service: name: httpd state: started enabled: yes- name: open firewalld port firewalld: service: http permanent: yes state: enabled immediate: yes- name: template a file template: src: index.html.j2 dest: /var/www/html/index.html[student@workstation ansible]$ vim roles/apache/templates/index.html.j2welcome to {{ ansible_fqdn }} on {{ ansible_default_ipv4.address }} 12345678910111213141516171819202122232425262728293031327.使用来自ansible galaxy的roles:做此题之前，先停一下 bastion 主机上的 httpd 服务，但会导致 servera,b,c,d 重启时无法启动到登录界面，不过不影响。停止方法： sudo systemctl stop httpd创建一个 playbook 名字叫/home/admin/ansible/roles.yml, 要求如下： 这个 playbook 运行在 balancers 这个主机组上，并使用 balance 的角色。 这个角色配置一个用来在 webservers 主机组上实现一个负载均衡服务 使用浏览器访问 balancers 主机组, 如 http://bastion.lab.example.com 可以看到如下输出： welcome to serverc.lab.example.com on 172.25.250.12 重新刷新浏览器，可以看到如下输出： welcome to serverd.lab.example.com on 172.25.250.13 这个 playbook 运行在 webservers 主机组上使用 phpinfo 的角色。 使用浏览器 URL：bastion.lab.example.com/hello.php 访问主机组 webservers 时，看到如下输出： Hello PHP World from FQDN注意，FQDN 是主机的完整域名。 比如，浏览器访问 URL：http://serverc.lab.example.com/hello.php 看到如下输出： Hello PHP World from serverc.lab.example.com 类似的，浏览器访问 URL：http://serverd.lab.example.com/hello.php 看到如下输出： Hello PHP World from serverd.lab.example.com#######################################################################################[student@workstation ansible]$ vim roles.yml---- name: use balancer hosts: balancers roles: - balancer- name: user apache and phpinfo hosts: webservers roles: - apache - phpinfo[student@workstation ansible]$ ansible-playbook roles.yml[student@workstation ansible]$ curl http://bastion # 静态访问[student@workstation ansible]$ curl http://bastion/hello.php # 动态访问 123456789101112131415161718192021222324252627282930313233343536373839404142434445468.创建并使用逻辑卷:创建一个 playbook 名字叫/home/devops/ansible/lv.yml，对所有的节点操作：创建一个逻辑卷要求如下： LV 创建在 vg0 这个卷组里 LV 的名字叫 lv01 LV 的大小是 1500M 格式化成 ext4 文件系统 如果 LV 的大小不满足，产生报错信息：could not create lv of that size 则创建分区大小变成 800M 如果卷组 vg0 不存在，显示错误信息: vg group does not exist 不要使用任何方式挂载逻辑卷#######################################################################################[student@workstation ansible]$ vim lv.yml---- name: create lv hosts: all tasks: - block: - name: create lv01 of 1500M lvol: vg: vg0 lv: lv01 size: 1500 - name: ext4 filesystem: fstype: ext4 dev: /dev/vg0/lv01 rescue: - debug: msg: con not create lv of that size - name: create lv01 of 1500M lvol: vg: vg0 lv: lv01 size: 800 - name: ext4 filesystem: fstype: ext4 dev: /dev/vg0/lv01 when: ansible_lvm.vgs.vg0 is defined ignore_errors: yes - debug: msg: vloume group does not exist when: ansible_lvm.vgs.vg0 is undefined[student@workstation ansible]$ ansible-playbook lv.yml# 使用sudo lvs查看逻辑卷大小 12345678910111213141516171819202122232425269.生成一个 hosts 文件:下载 http://materials.example.com/hosts.j2 的初始化模板文件到/home/devops/ansible 目录完成该模板，以便可以使用它以与/etc/hosts 相同的格式生成每个库存主机的文件创建一个 playbook 名为/home/devops/ansible/hosts.yml, 来使用模板为 dev 组中的主机生成/etc/myhosts 文件完成时，myhosts 文件内容为：127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6172.25.250.10 servera.lab.example.com servera172.25.250.11 serverb.lab.example.com serverb172.25.250.12 serverc.lab.example.com serverc172.25.250.13 serverd.lab.example.com serverd172.25.250.14 bastion.lab.example.com bastion注意：生成的文件顺序不对没有关系。#######################################################################################[student@workstation ansible]$ wget http://materials.example.com/hosts.j2[student@workstation ansible]$ vim hosts.yml---- name: create my hosts hosts: all tasks: - name: template a file /etc/myhosts template: src: /home/student/ansible/hosts.j2 dest: /etc/myhosts when: '\"dev\" in group_names'[student@workstation ansible]$ ansible-playbook hosts.yml 12345678910111213141516171819202122232425262728293010.修改文件内容:创建一个 playbook 名为/home/devops/ansible/issue.yml，修改/etc/issuse 的内容，要求如下: 在 dev 主机组上，单行显示的内容是: Development 在 test 主机组上，单行显示的内容是: Test 在 prod 主机组上，单行显示的内容是：Production#######################################################################################[student@workstation ansible]$ vim issue.yml---- name: replace issue hosts: all tasks: - name: replace development copy: content: \"Development \\n\" dest: /etc/issue when: \"inventory_hostname in groups.dev\" - name: replace test copy: content: \"Test \\n\" dest: /etc/issue when: \"inventory_hostname in groups.test\" - name: replace production copy: content: \"Production \\n\" dest: /etc/issue when: \"inventory_hostname in groups.production\"[student@workstation ansible]$ ansible-playbook issue.yml[student@workstation ansible]$ ansible dev -m shell -a 'cat /etc/issue'[student@workstation ansible]$ ansible test -m shell -a 'cat /etc/issue'[student@workstation ansible]$ ansible prod -m shell -a 'cat /etc/issue' 12345678910111213141516171819202122232425262728293031323334353637383940414211.创建一个 WEB 内容目录:创建一个 playbook 名字叫/home/devops/ansible/webcontent.yml, 要求如下： 这个 playbook 运行在 dev 主机组 创建/webdev 目录，要求如下： 目录属于 webdev 组 权限是 2755 软链接/var/www/html/webdev 到/webdev 在/webdev 中创建 index.html, 内容为: Development 通过 servera.lab.example.com/webdev/ 能访问到内容#######################################################################################[student@workstation ansible]$ vim webcontent.yml---- name: create web dir hosts: dev roles: - apache tasks:# - name: create group (如果没有webved这个组，就增加这一段)# group:# name: webdev# state: present - name: create dir file: path: /webdev state: directory group: webdev mode: '2775' - name: create symbolic link file: src: /webdev dest: /var/www/html/webdev state: link - name: web content copy: content: \"Development \\n\" dest: /webdev/index.html setype: httpd_sys_content_t[student@workstation ansible]$ ansible-playbook webcontent.yml[student@workstation ansible]$ ansible dev -m shell -a \"ls -ld /webdev\"[student@workstation ansible]$ ansible dev -m shell -a \"ls -l /var/www/html\"[student@workstation ansible]$ ansible dev -m shell -a \"cat /webdev/index.html\"[student@workstation ansible]$ curl http://servera/webdev/ 123456789101112131415161718192021222324252627282930313233343536373839404112.# 创建硬件报告：创建一个 playbook 名字叫/home/devops/ansible/hwreport.yml, 在所有的受管主机上创建/root/hwreport.yml, 包含如下内容： inventory 的主机名 Total memory in MB BIOS version vda size vdb size 每行均为一个键值对playbook 会下载 http://materials.example.com/hwreport.empty, 并修改成为 hwreport.txt如果硬件不存在，则对应的值为：NONE#######################################################################################[student@workstation ansible]$ wget http://materials.example.com/hwreport.empty # 检查变量使用[student@workstation ansible]$ vim hwreport.yml---- name: hw report hosts: all vars: hw_all: - hw_name: HOST hw_cont: \"{{ inventory_hostname | default('NONE',true) }}\" - hw_name: MEMORY hw_cont: \"{{ ansible_memtotal_mb | default('NONE',true) }}\" - hw_name: BIOS hw_cont: \"{{ ansible_bios_version | default('NONE',true) }}\" - hw_name: DISK_SIZE_VDA hw_cont: \"{{ ansible_devices.vda.size | default('NONE',true) }}\" - hw_name: DISK_SIZE_VDB hw_cont: \"{{ ansible_devices.vdb.size | default('NONE',true) }}\" tasks: - name: down hw_temp get_url: url: http://materials.example.com/hwreport.empty dest: /root/hwreport.txt - name: all report lineinfile: path: /root/hwreport.txt regexp: '^{{ item.hw_name }}=' line: \"{{ item.hw_name }}={{ item.hw_cont }}\" loop: \"{{ hw_all }}\"[student@workstation ansible]$ ansible-play hwreport.yml[student@workstation ansible]$ ansible all -a 'cat /root/hwreport.txt' 1234567891011121314151613.# 创建一个包含密码的 vault 文件：vault 文件名：locker.yml ，其中包含两个变量： pw_developer: Imadev pw_manager: lmamgr vault 的加解密密钥为：redhat 密钥保存在/home/devops/ansible/secret.txt#######################################################################################[student@workstation ansible]$ vim ansible.cfgvault_password_file = /home/student/ansible/secret.txt[student@workstation ansible]$ vim locker.yml---pw_developer: Imadevpw_manager: lmamgr[student@workstation ansible]$ echo \"redhat\" &gt; secret.txt[student@workstation ansible]$ ansible-vault encrypt locker.yaml[student@workstation ansible]$ cat locker.yaml 12345678910111213141516171819202122232425262728293031323334353637383940414243444514.# 创建用户账户使用 http://materials.example.com/user_list .yml 文件和/home/devops/ansible/locker.yml文件，创建 playbook 文件 users.yml 以创建用户 dev 和 test 主机组中创建带有工作描述为: devopler 的用户，密码使用: pw_developer 变量，用户的附属组为 devops prod 主机组中创建带有工作描述为: manager 的用户，密码使用 pw_manager 变量，用户的附属组为 opsmgr 密码均基于 SHA512 hash 格式创建#######################################################################################[student@workstation ansible]$ wget http://materials.example.com/user_list.yml[student@workstation ansible]$ vim users.yml---- name: create users hosts: all vars_files: - /home/student/ansible/user_list.yml - /home/student/ansible/locker.yml tasks: - name: create group devops group: name: devops state: present when: inventory_hostname in groups.dev or inventory_hostname in groups.test - name: create group opsmgr group: name: opsmgr state: present when: inventory_hostname in groups.prod - name: create user dev user: name: \"{{ item.name }}\" groups: devops password: \"{{ pw_developer | password_hash('sha521','mysecretsalt') }}\" comment: \"{{ item.job }}\" loop: \"{{ users }}\" when: item.job == 'developer' and (inventory_hostname in groups.dev or inventory_hostname in groups.test) - name: create user manager user: name: \"{{ item.name }}\" groups: opsmgr password: \"{{ pw_manager | password_hash('sha521','mysecretsalt') }}\" comment: \"{{ item.job }}\" loop: \"{{ users }}\" when: item.jobs == 'manager' and inventory_hostname in groups.prod[student@workstation ansible]$ ansible-playbook users.yml document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-08-29T02:35:29.927Z","updated":"2020-08-29T02:35:29.927Z","comments":true,"path":"2020/08/29/hello-world/","link":"","permalink":"https://gawain-sq.github.io.git/2020/08/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}